import asyncio
import random

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import TOKEN
import sqlite3
import logging
import requests

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

button_registr = KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
button_exchange_rates = KeyboardButton(text="–ö—É—Ä—Å –≤–∞–ª—é—Ç")
button_tips = KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
button_finances = KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
button_wiev_finances = KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã")

keyboards = ReplyKeyboardMarkup(keyboard=[
   [button_registr, button_exchange_rates],
   [button_tips, button_finances],
   [button_wiev_finances]
   ], resize_keyboard=True)

conn = sqlite3.connect('user.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
   id INTEGER PRIMARY KEY,
   telegram_id INTEGER UNIQUE,
   name TEXT,
   category1 TEXT,
   category2 TEXT,
   category3 TEXT,
   expenses1 REAL,
   expenses2 REAL,
   expenses3 REAL
   )
''')

conn.commit()

class FinancesForm(StatesGroup):
   category1 = State()
   expenses1 = State()
   category2 = State()
   expenses2 = State()
   category3 = State()
   expenses3 = State()


@dp.message(Command('start'))
async def send_start(message: Message):
   await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é:", reply_markup=keyboards)

@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
async def registration(message: Message):
   telegram_id = message.from_user.id
   name = message.from_user.full_name
   cursor.execute('''SELECT * FROM users WHERE telegram_id = ?''', (telegram_id,))
   user = cursor.fetchone()
   if user:
       await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
   else:
       cursor.execute('''INSERT INTO users (telegram_id, name) VALUES (?, ?)''', (telegram_id, name))
       conn.commit()
       await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def get_user_data_for_bot(telegram_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        #conn = sqlite3.connect('your_database.db')
        #cursor = conn.cursor()

        cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user_data = cursor.fetchone()

        if not user_data:
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        (_, _, name, cat1, cat2, cat3, exp1, exp2, exp3) = user_data

        message = [
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
            f"üë§ <b>–ò–º—è:</b> {name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
            "",
            "üí≥ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>",
            f"1. {cat1 or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}: {exp1 or 0:.2f} ‚ÇΩ",
            f"2. {cat2 or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}: {exp2 or 0:.2f} ‚ÇΩ",
            f"3. {cat3 or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}: {exp3 or 0:.2f} ‚ÇΩ"
        ]

        return "\n".join(message)

    except sqlite3.Error as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"


@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã")
async def wiev_finance(message: Message):
    await message.answer(get_user_data_for_bot(message.from_user.id), parse_mode='HTML')


@dp.message(F.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
   url = "https://v6.exchangerate-api.com/v6/09edf8b2bb246e1f801cbfba/latest/USD"
   try:
       response = requests.get(url)
       data = response.json()
       if response.status_code != 200:
           await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!")
           return
       usd_to_rub = data['conversion_rates']['RUB']
       eur_to_usd = data['conversion_rates']['EUR']

       euro_to_rub =  usd_to_rub / eur_to_usd
       await message.answer(f"1 USD - {usd_to_rub:.2f}  RUB\n"
                            f"1 EUR - {euro_to_rub:.2f}  RUB")


   except:
       await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message(F.text == "–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
async def send_tips(message: Message):
   tips = [
       "–°–æ–≤–µ—Ç 1: –í–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.",
       "–°–æ–≤–µ—Ç 2: –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
       "–°–æ–≤–µ—Ç 3: –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–∫–∏–¥–∫–∞–º –∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞–º."
   ]
   tip = random.choice(tips)
   await message.answer(tip)

@dp.message(F.text == "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def finances(message: Message, state: FSMContext):
   await state.set_state(FinancesForm.category1)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@dp.message(FinancesForm.category1)
async def finances(message: Message, state: FSMContext):
   await state.update_data(category1 = message.text)
   await state.set_state(FinancesForm.expenses1)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1:")

@dp.message(FinancesForm.expenses1)
async def finances(message: Message, state: FSMContext):
   await state.update_data(expenses1 = float(message.text))
   await state.set_state(FinancesForm.category2)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@dp.message(FinancesForm.category2)
async def finances(message: Message, state: FSMContext):
   await state.update_data(category2 = message.text)
   await state.set_state(FinancesForm.expenses2)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2:")

@dp.message(FinancesForm.expenses2)
async def finances(message: Message, state: FSMContext):
   await state.update_data(expenses2 = float(message.text))
   await state.set_state(FinancesForm.category3)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

@dp.message(FinancesForm.category3)
async def finances(message: Message, state: FSMContext):
   await state.update_data(category3 = message.text)
   await state.set_state(FinancesForm.expenses3)
   await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3:")

@dp.message(FinancesForm.expenses3)
async def finances(message: Message, state: FSMContext):
   data = await state.get_data()
   telegarm_id = message.from_user.id
   cursor.execute('''UPDATE users SET category1 = ?, expenses1 = ?, category2 = ?, expenses2 = ?, category3 = ?, expenses3 = ? WHERE telegram_id = ?''',
                  (data['category1'], data['expenses1'], data['category2'], data['expenses2'], data['category3'], float(message.text), telegarm_id))
   conn.commit()
   await state.clear()

   await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


async def main():
   await dp.start_polling(bot)

if __name__ == '__main__':
   asyncio.run(main())



