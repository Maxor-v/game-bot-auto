import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
import requests
from PIL import Image, ImageFilter
from io import BytesIO
from config import TOKEN, UNSPLASH_API_KEY, DADATA_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()


class GameState:
    def __init__(self):
        self.image_url: str = ""
        self.correct_answer: str = ""


game_state = GameState()


async def get_random_car_image() -> tuple[str, str]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å Unsplash"""
    url = f"https://api.unsplash.com/photos/random?query=car&client_id={UNSPLASH_API_KEY}"
    response = requests.get(url).json()
    image_url = response["urls"]["regular"]
    description = response.get("alt_description", "unknown car").lower()

    print(description)

    return image_url, description


async def create_blurred_image(image_url: str) -> bytes:
    """–°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ"""
    response = requests.get(image_url)
    image = Image.open(BytesIO(response.content))
    blurred = image.filter(ImageFilter.GaussianBlur(radius=10))

    img_byte_arr = BytesIO()
    blurred.save(img_byte_arr, format='JPEG')
    return img_byte_arr.getvalue()


async def check_car_brand(user_guess: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è —á–µ—Ä–µ–∑ DaData"""
    url = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/car_brand"
    headers = {
        "Authorization": f"Token {DADATA_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {"query": user_guess}
    response = requests.post(url, headers=headers, json=data).json()
    print(response)

    return len(response["suggestions"]) > 0


@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        image_url, description = await get_random_car_image()
        blurred_image = await create_blurred_image(image_url)

        game_state.image_url = image_url
        game_state.correct_answer = description

        await message.answer_photo(
            photo=BufferedInputFile(blurred_image, filename="car.jpg"),
            caption="üéÆ –ù–∞–∑–æ–≤–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è! –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
        )

        await message.answer(
            text=f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {game_state.correct_answer}."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.message(F.text)
async def handle_guess(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–≥–∞–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not game_state.image_url:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        if await check_car_brand(message.text.lower()):
            await message.answer_photo(
                photo=game_state.image_url,
                caption=f"‚úÖ –í–µ—Ä–Ω–æ! –ï—Å—Ç—å —Ç–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å."
            )
        else:
            await message.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())